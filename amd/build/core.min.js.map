{"version":3,"file":"core.min.js","sources":["../src/core.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    mod_jazzquiz\n * @author    Sebastian S. Gundersen <sebastsg@stud.ntnu.no>\n * @copyright 2014 University of Wisconsin - Madison\n * @copyright 2018 NTNU\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/config', 'core/str', 'core/yui', 'core/event'], function ($, mConfig, mString, Y, mEvent) {\n\n    // Contains the needed values for using the ajax script.\n    let session = {\n        courseModuleId: 0,\n        activityId: 0, // TODO: Remove activityId? Unsure if used.\n        sessionId: 0,\n        attemptId: 0,\n        sessionKey: ''\n    };\n\n    // Used for caching the latex of maxima input.\n    let cache = [];\n\n    // TODO: Migrate to core/ajax module?\n    class Ajax {\n\n        /**\n         * Send a request using AJAX, with method specified.\n         * @param {string} method Which HTTP method to use.\n         * @param {string} url Relative to root of jazzquiz module. Does not start with /.\n         * @param {Object} data Object with parameters as properties. Reserved: id, quizid, sessionid, attemptid, sesskey\n         * @param {function} success Callback function for when the request was completed successfully.\n         * @return {jqXHR} The jQuery XHR object\n         */\n        static request(method, url, data, success) {\n            data.id = session.courseModuleId;\n            data.sessionid = session.sessionId;\n            data.attemptid = session.attemptId;\n            data.sesskey = session.sessionKey;\n            return $.ajax({\n                type: method,\n                url: url,\n                data: data,\n                dataType: 'json',\n                success: success\n            }).fail(() => setText(Quiz.info, 'error_with_request'));\n        }\n\n        /**\n         * Send a GET request using AJAX.\n         * @param {string} action Which action to query.\n         * @param {Object} data Object with parameters as properties. Reserved: id, quizid, sessionid, attemptid, sesskey\n         * @param {function} success Callback function for when the request was completed successfully.\n         * @return {jqXHR} The jQuery XHR object\n         */\n        static get(action, data, success) {\n            data.action = action;\n            return Ajax.request('get', 'ajax.php', data, success);\n        }\n\n        /**\n         * Send a POST request using AJAX.\n         * @param {string} action Which action to query.\n         * @param {Object} data Object with parameters as properties. Reserved: id, quizid, sessionid, attemptid, sesskey\n         * @param {function} success Callback function for when the request was completed successfully.\n         * @return {jqXHR} The jQuery XHR object\n         */\n        static post(action, data, success) {\n            data.action = action;\n            return Ajax.request('post', 'ajax.php', data, success);\n        }\n\n    }\n\n    class Question {\n\n        constructor(quiz) {\n            this.quiz = quiz;\n            this.isRunning = false;\n            this.isSaving = false;\n            this.endTime = 0;\n            this.isVoteRunning = false;\n            this.hasVotes = false;\n            this.countdownTimeLeft = 0;\n            this.questionTime = 0;\n            this.countdownInterval = 0;\n            this.timerInterval = 0;\n        }\n\n        static get box() {\n            return $('#jazzquiz_question_box');\n        }\n\n        static get timer() {\n            return $('#jazzquiz_question_timer');\n        }\n\n        static get form() {\n            return $('#jazzquiz_question_form');\n        }\n\n        /**\n         * Request the current question form.\n         */\n        refresh() {\n            Ajax.get('get_question_form', {}, data => {\n                if (data.is_already_submitted) {\n                    setText(Quiz.info, 'wait_for_instructor');\n                    return;\n                }\n                Quiz.show(Question.box.html(data.html));\n                // eslint-disable-next-line no-eval\n                eval(data.js);\n                data.css.forEach(cssUrl => {\n                    let head = document.getElementsByTagName('head')[0];\n                    let style = document.createElement('link');\n                    style.rel = 'stylesheet';\n                    style.type = 'text/css';\n                    style.href = cssUrl;\n                    head.appendChild(style);\n                });\n                this.quiz.role.onQuestionRefreshed(data);\n                Quiz.renderAllMathjax();\n            });\n        }\n\n        /**\n         * Hide the question \"ending in\" timer, and clears the interval.\n         */\n        hideTimer() {\n            Quiz.hide(Question.timer);\n            clearInterval(this.timerInterval);\n            this.timerInterval = 0;\n        }\n\n        /**\n         * Is called for every second of the question countdown.\n         * @param {number} questionTime in seconds\n         */\n        onCountdownTick(questionTime) {\n            this.countdownTimeLeft--;\n            if (this.countdownTimeLeft <= 0) {\n                clearInterval(this.countdownInterval);\n                this.countdownInterval = 0;\n                this.startAttempt(questionTime);\n            } else if (this.countdownTimeLeft !== 0) {\n                setText(Quiz.info, 'question_will_start_in_x_seconds', 'jazzquiz', this.countdownTimeLeft);\n            } else {\n                setText(Quiz.info, 'question_will_start_now');\n            }\n        }\n\n        /**\n         * Start a countdown for the question which will eventually start the question attempt.\n         * The question attempt might start before this function return, depending on the arguments.\n         * If a countdown has already been started, this call will return true and the current countdown will continue.\n         * @param {number} questionTime\n         * @param {number} countdownTimeLeft\n         * @return {boolean} true if countdown is active\n         */\n        startCountdown(questionTime, countdownTimeLeft) {\n            if (this.countdownInterval !== 0) {\n                return true;\n            }\n            questionTime = parseInt(questionTime);\n            countdownTimeLeft = parseInt(countdownTimeLeft);\n            this.countdownTimeLeft = countdownTimeLeft;\n            if (countdownTimeLeft < 1) {\n                // Check if the question has already ended.\n                if (questionTime > 0 && countdownTimeLeft < -questionTime) {\n                    return false;\n                }\n                // No need to start the countdown. Just start the question.\n                if (questionTime > 1) {\n                    this.startAttempt(questionTime + countdownTimeLeft);\n                } else {\n                    this.startAttempt(0);\n                }\n                return true;\n            }\n            this.countdownInterval = setInterval(() => this.onCountdownTick(questionTime), 1000);\n            return true;\n        }\n\n        /**\n         * When the question \"ending in\" timer reaches 0 seconds, this will be called.\n         */\n        onTimerEnding() {\n            this.isRunning = false;\n            this.quiz.role.onTimerEnding();\n        }\n\n        /**\n         * Is called for every second of the \"ending in\" timer.\n         */\n        onTimerTick() {\n            const currentTime = new Date().getTime();\n            if (currentTime > this.endTime) {\n                this.hideTimer();\n                this.onTimerEnding();\n            } else {\n                const timeLeft = parseInt((this.endTime - currentTime) / 1000);\n                this.quiz.role.onTimerTick(timeLeft);\n            }\n        }\n\n        /**\n         * Request the current question from the server.\n         * @param {number} questionTime\n         */\n        startAttempt(questionTime) {\n            Quiz.hide(Quiz.info);\n            this.refresh();\n            // Set this to true so that we don't keep calling this over and over.\n            this.isRunning = true;\n            questionTime = parseInt(questionTime);\n            if (questionTime === 0) {\n                // 0 means no timer.\n                return;\n            }\n            this.quiz.role.onTimerTick(questionTime); // TODO: Is it worth having this line?\n            this.endTime = new Date().getTime() + questionTime * 1000;\n            this.timerInterval = setInterval(() => this.onTimerTick(), 1000);\n        }\n\n        static isLoaded() {\n            return Question.box.html() !== '';\n        }\n\n    }\n\n    class Quiz {\n\n        constructor(Role) {\n            this.state = '';\n            this.isNewState = false;\n            this.question = new Question(this);\n            this.role = new Role(this);\n            this.events = {\n                notrunning: 'onNotRunning',\n                preparing: 'onPreparing',\n                running: 'onRunning',\n                reviewing: 'onReviewing',\n                sessionclosed: 'onSessionClosed',\n                voting: 'onVoting'\n            };\n        }\n\n        changeQuizState(state, data) {\n            this.isNewState = this.state !== state;\n            this.state = state;\n            this.role.onStateChange();\n            const event = this.events[state];\n            this.role[event](data);\n        }\n\n        /**\n         * Initiate the chained session info calls to ajax.php\n         * @param {number} ms interval in milliseconds\n         */\n        poll(ms) {\n            Ajax.get('info', {}, data => {\n                this.changeQuizState(data.status, data);\n                setTimeout(() => this.poll(ms), ms);\n            });\n        }\n\n        static get main() {\n            return $('#jazzquiz');\n        }\n\n        static get info() {\n            return $('#jazzquiz_info_container');\n        }\n\n        static get responded() {\n            return $('#jazzquiz_responded_container');\n        }\n\n        static get responses() {\n            return $('#jazzquiz_responses_container');\n        }\n\n        static get responseInfo() {\n            return $('#jazzquiz_response_info_container');\n        }\n\n        static hide($element) {\n            $element.addClass('hidden');\n        }\n\n        static show($element) {\n            $element.removeClass('hidden');\n        }\n\n        static uncheck($element) {\n            $element.children('.fa').removeClass('fa-check-square-o').addClass('fa-square-o');\n        }\n\n        static check($element) {\n            $element.children('.fa').removeClass('fa-square-o').addClass('fa-check-square-o');\n        }\n\n        /**\n         * Triggers a dynamic content update event, which MathJax listens to.\n         */\n        static renderAllMathjax() {\n            mEvent.notifyFilterContentUpdated(document.getElementsByClassName('jazzquiz-response-container'));\n        }\n\n        /**\n         * Sets the body of the target, and triggers an event letting MathJax know about the element.\n         * @param {*} $target\n         * @param {string} latex\n         */\n        static addMathjaxElement($target, latex) {\n            $target.html('<span class=\"filter_mathjaxloader_equation\">' + latex + '</span>');\n            Quiz.renderAllMathjax();\n        }\n\n        /**\n         * Converts the input to LaTeX and renders it to the target with MathJax.\n         * @param {string} input\n         * @param {string} targetId\n         */\n        static renderMaximaEquation(input, targetId) {\n            const target = document.getElementById(targetId);\n            if (target === null) {\n                // Log error to console: 'Target element #' + targetId + ' not found.'.\n                return;\n            }\n            if (cache[input] !== undefined) {\n                Quiz.addMathjaxElement($('#' + targetId), cache[input]);\n                return;\n            }\n            Ajax.get('stack', { input: encodeURIComponent(input) }, data => {\n                cache[data.original] = data.latex;\n                Quiz.addMathjaxElement($('#' + targetId), data.latex);\n            });\n        }\n\n    }\n\n    /**\n     * Retrieve a language string that was sent along with the page.\n     * @param {*} $element\n     * @param {string} key Which string in the language file we want.\n     * @param {string} [from=jazzquiz] Which language file we want the string from. Default is jazzquiz.\n     * @param {array} args This is {$a} in the string for the key.\n     */\n    function setText($element, key, from, args) {\n        from = from !== undefined ? from : 'jazzquiz';\n        args = args !== undefined ? args : [];\n        $.when(mString.get_string(key, from, args)).done(text => Quiz.show($element.html(text)));\n    }\n\n    return {\n        initialize: (courseModuleId, activityId, sessionId, attemptId, sessionKey) => {\n            session.courseModuleId = courseModuleId;\n            session.activityId = activityId;\n            session.sessionId = sessionId;\n            session.attemptId = attemptId;\n            session.sessionKey = sessionKey;\n        },\n        Quiz: Quiz,\n        Question: Question,\n        Ajax: Ajax,\n        setText: setText\n    };\n});"],"names":["define","$","mConfig","mString","Y","mEvent","session","courseModuleId","activityId","sessionId","attemptId","sessionKey","cache","Ajax","method","url","data","success","id","sessionid","attemptid","sesskey","ajax","type","dataType","fail","setText","Quiz","info","action","request","Question","constructor","quiz","isRunning","isSaving","endTime","isVoteRunning","hasVotes","countdownTimeLeft","questionTime","countdownInterval","timerInterval","box","timer","form","refresh","get","is_already_submitted","show","html","eval","js","css","forEach","cssUrl","head","document","getElementsByTagName","style","createElement","rel","href","appendChild","role","onQuestionRefreshed","renderAllMathjax","hideTimer","hide","clearInterval","this","onCountdownTick","startAttempt","startCountdown","parseInt","setInterval","onTimerEnding","onTimerTick","currentTime","Date","getTime","timeLeft","Role","state","isNewState","question","events","notrunning","preparing","running","reviewing","sessionclosed","voting","changeQuizState","onStateChange","event","poll","ms","status","setTimeout","main","responded","responses","responseInfo","$element","addClass","removeClass","children","notifyFilterContentUpdated","getElementsByClassName","$target","latex","input","targetId","getElementById","undefined","encodeURIComponent","original","addMathjaxElement","key","from","args","when","get_string","done","text","initialize"],"mappings":"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"}