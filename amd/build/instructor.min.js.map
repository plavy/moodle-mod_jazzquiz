{"version":3,"file":"instructor.min.js","sources":["../src/instructor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module    mod_jazzquiz\n * @author    Sebastian S. Gundersen <sebastsg@stud.ntnu.no>\n * @copyright 2014 University of Wisconsin - Madison\n * @copyright 2018 NTNU\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'mod_jazzquiz/core'], function ($, Jazz) {\n\n    const Quiz = Jazz.Quiz;\n    const Question = Jazz.Question;\n    const Ajax = Jazz.Ajax;\n    const setText = Jazz.setText;\n\n    /**\n     * Sanitize and encode all HTML in a user-submitted string\n     * https://portswigger.net/web-security/cross-site-scripting/preventing\n     * @param  {String} str  The user-submitted string\n     * @return {String} str  The sanitized string\n     */\n    var sanitizeHTML = function (str) {\n        return str.replace(/[^\\w. ]/gi, function (c) {\n            return '&#' + c.charCodeAt(0) + ';';\n        });\n    };\n\n    class ResponseView {\n\n        /**\n         * @param {Quiz} quiz\n         */\n        constructor(quiz) {\n            this.quiz = quiz;\n            this.currentResponses = [];\n            this.showVotesUponReview = false;\n            this.respondedCount = 0;\n            this.showResponses = false;\n            this.totalStudents = 0;\n            $(document).on('click', '#jazzquiz_undo_merge', () => this.undoMerge());\n            $(document).on('click', event => {\n                // Clicking a row to merge.\n                if (event.target.classList.contains('bar')) {\n                    this.startMerge(event.target.id);\n                } else if (event.target.parentNode && event.target.parentNode.classList.contains('bar')) {\n                    this.startMerge(event.target.parentNode.id);\n                }\n            });\n            $(document).on('click', '#review_show_normal_results', () => this.refresh(false));\n            $(document).on('click', '#review_show_vote_results', () => this.refreshVotes());\n        }\n\n        /**\n         * Clear, but not hide responses.\n         */\n        clear() {\n            Quiz.responses.html('');\n            Quiz.responseInfo.html('');\n        }\n\n        /**\n         * Hides the responses\n         */\n        hide() {\n            Quiz.uncheck(Instructor.control('responses'));\n            Quiz.hide(Quiz.responses);\n            Quiz.hide(Quiz.responseInfo);\n        }\n\n        /**\n         * Shows the responses\n         */\n        show() {\n            Quiz.check(Instructor.control('responses'));\n            Quiz.show(Quiz.responses);\n            Quiz.show(Quiz.responseInfo);\n            if (this.showVotesUponReview) {\n                this.refreshVotes();\n                this.showVotesUponReview = false;\n            } else {\n                this.refresh(false);\n            }\n        }\n\n        /**\n         * Toggle whether to show or hide the responses\n         */\n        toggle() {\n            this.showResponses = !this.showResponses;\n            if (this.showResponses) {\n                this.show();\n            } else {\n                this.hide();\n            }\n        }\n\n        /**\n         * End the response merge.\n         */\n        endMerge() {\n            $('.merge-into').removeClass('merge-into');\n            $('.merge-from').removeClass('merge-from');\n        }\n\n        /**\n         * Undo the last response merge.\n         */\n        undoMerge() {\n            Ajax.post('undo_merge', {}, () => this.refresh(true));\n        }\n\n        /**\n         * Merges responses based on response string.\n         * @param {string} from\n         * @param {string} into\n         */\n        merge(from, into) {\n            Ajax.post('merge_responses', { from: from, into: into }, () => this.refresh(false));\n        }\n\n        /**\n         * Start a merge between two responses.\n         * @param {string} fromRowBarId\n         */\n        startMerge(fromRowBarId) {\n            const $barCell = $('#' + fromRowBarId);\n            let $row = $barCell.parent();\n            if ($row.hasClass('merge-from')) {\n                this.endMerge();\n                return;\n            }\n            if ($row.hasClass('merge-into')) {\n                const $fromRow = $('.merge-from');\n                this.merge($fromRow.data('response'), $row.data('response'));\n                this.endMerge();\n                return;\n            }\n            $row.addClass('merge-from');\n            let $table = $row.parent().parent();\n            $table.find('tr').each(function () {\n                const $cells = $(this).find('td');\n                if ($cells[1].id !== $barCell.attr('id')) {\n                    $(this).addClass('merge-into');\n                }\n            });\n        }\n\n        /**\n         * Create controls to toggle between the responses of the actual question and the vote that followed.\n         * @param {string} name Can be either 'vote_response' or 'current_response'\n         */\n        createControls(name) {\n            if (!this.quiz.question.hasVotes) {\n                Quiz.hide(Quiz.responseInfo);\n                return;\n            }\n            // Add button for instructor to change what to review.\n            if (this.quiz.state === 'reviewing') {\n                let $showNormalResult = $('#review_show_normal_results');\n                let $showVoteResult = $('#review_show_vote_results');\n                Quiz.show(Quiz.responseInfo);\n                if (name === 'vote_response') {\n                    if ($showNormalResult.length === 0) {\n                        setText(Quiz.responseInfo.html('<h4 class=\"inline\"></h4>').children('h4'), 'showing_vote_results');\n                        Quiz.responseInfo.append('<button id=\"review_show_normal_results\" class=\"btn btn-primary\"></button><br>');\n                        setText($('#review_show_normal_results'), 'click_to_show_original_results');\n                        $showVoteResult.remove();\n                    }\n                } else if (name === 'current_response') {\n                    if ($showVoteResult.length === 0) {\n                        setText(Quiz.responseInfo.html('<h4 class=\"inline\"></h4>').children('h4'), 'showing_original_results');\n                        Quiz.responseInfo.append('<button id=\"review_show_vote_results\" class=\"btn btn-primary\"></button><br>');\n                        setText($('#review_show_vote_results'), 'click_to_show_vote_results');\n                        $showNormalResult.remove();\n                    }\n                }\n            }\n        }\n\n        /**\n         * Create a new and unsorted response bar graph.\n         * @param {Array.<Object>} responses\n         * @param {string} name\n         * @param {string} targetId\n         * @param {string} graphId\n         * @param {boolean} rebuild If the table should be completely rebuilt or not\n         */\n        createBarGraph(responses, name, targetId, graphId, rebuild) {\n            let target = document.getElementById(targetId);\n            if (target === null) {\n                return;\n            }\n            let total = 0;\n            let highestResponseCount = 0;\n            for (let i = 0; i < responses.length; i++) {\n                let count = parseInt(responses[i].count); // In case count is a string.\n                total += count;\n                if (count > highestResponseCount) {\n                    highestResponseCount = count;\n                }\n            }\n            if (total === 0) {\n                total = 1;\n            }\n\n            // Remove the rows if it should be rebuilt.\n            if (rebuild) {\n                target.innerHTML = '';\n            }\n\n            // Prune rows.\n            for (let i = 0; i < target.rows.length; i++) {\n                let prune = true;\n                for (let j = 0; j < responses.length; j++) {\n                    if (target.rows[i].dataset.response === responses[j].response) {\n                        prune = false;\n                        break;\n                    }\n                }\n                if (prune) {\n                    target.deleteRow(i);\n                    i--;\n                }\n            }\n\n            this.createControls(name);\n\n            name += graphId;\n\n            // Add rows.\n            for (let i = 0; i < responses.length; i++) {\n                // Const percent = (parseInt(responses[i].count) / total) * 100;\n                const percent = parseInt(responses[i].count) / highestResponseCount * 100;\n\n                // Check if row with same response already exists.\n                let rowIndex = -1;\n                let currentRowIndex = -1;\n                for (let j = 0; j < target.rows.length; j++) {\n                    if (target.rows[j].dataset.response === responses[i].response) {\n                        rowIndex = target.rows[j].dataset.row_i;\n                        currentRowIndex = j;\n                        break;\n                    }\n                }\n\n                if (rowIndex === -1) {\n                    rowIndex = target.rows.length;\n                    let row = target.insertRow();\n                    row.dataset.response_i = i;\n                    row.dataset.response = responses[i].response;\n                    row.dataset.percent = percent;\n                    row.dataset.row_i = rowIndex;\n                    row.dataset.count = responses[i].count;\n                    row.classList.add('selected-vote-option');\n                    if (percent < 15) {\n                        row.classList.add('outside');\n                    }\n\n                    const countHtml = '<span id=\"' + name + '_count_' + rowIndex + '\">' + responses[i].count + '</span>';\n                    let responseCell = row.insertCell(0);\n                    responseCell.onclick = function () {\n                        $(this).parent().toggleClass('selected-vote-option');\n                    };\n\n                    let barCell = row.insertCell(1);\n                    barCell.classList.add('bar');\n                    barCell.id = name + '_bar_' + rowIndex;\n                    barCell.innerHTML = '<div style=\"width:' + percent + '%;\">' + countHtml + '</div>';\n\n                    const latexId = name + '_latex_' + rowIndex;\n                    responseCell.innerHTML = '<span id=\"' + latexId + '\"></span>';\n                    Quiz.addMathjaxElement($('#' + latexId), responses[i].response);\n                    if (responses[i].qtype === 'stack') {\n                        Quiz.renderMaximaEquation(responses[i].response, latexId);\n                    }\n                } else {\n                    let currentRow = target.rows[currentRowIndex];\n                    currentRow.dataset.row_i = rowIndex;\n                    currentRow.dataset.response_i = i;\n                    currentRow.dataset.percent = percent;\n                    currentRow.dataset.count = responses[i].count;\n                    const containsOutside = currentRow.classList.contains('outside');\n                    if (percent > 15 && containsOutside) {\n                        currentRow.classList.remove('outside');\n                    } else if (percent < 15 && !containsOutside) {\n                        currentRow.classList.add('outside');\n                    }\n                    let countElement = document.getElementById(name + '_count_' + rowIndex);\n                    if (countElement !== null) {\n                        countElement.innerHTML = responses[i].count;\n                    }\n                    let barElement = document.getElementById(name + '_bar_' + rowIndex);\n                    if (barElement !== null) {\n                        barElement.firstElementChild.style.width = percent + '%';\n                    }\n                }\n            }\n        }\n\n        /**\n         * Sort the responses in the graph by how many had the same response.\n         * @param {string} targetId\n         */\n        static sortBarGraph(targetId) {\n            let target = document.getElementById(targetId);\n            if (target === null) {\n                return;\n            }\n            let isSorting = true;\n            while (isSorting) {\n                isSorting = false;\n                for (let i = 0; i < target.rows.length - 1; i++) {\n                    const current = parseInt(target.rows[i].dataset.percent);\n                    const next = parseInt(target.rows[i + 1].dataset.percent);\n                    if (current < next) {\n                        target.rows[i].parentNode.insertBefore(target.rows[i + 1], target.rows[i]);\n                        isSorting = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Create and sort a bar graph based on the responses passed.\n         * @param {string} wrapperId\n         * @param {string} tableId\n         * @param {Array.<Object>} responses\n         * @param {number|undefined} responded How many students responded to the question\n         * @param {string} questionType\n         * @param {string} graphId\n         * @param {boolean} rebuild If the graph should be rebuilt or not.\n         */\n        set(wrapperId, tableId, responses, responded, questionType, graphId, rebuild) {\n            if (responses === undefined) {\n                return;\n            }\n\n            // Check if any responses to show.\n            if (responses.length === 0) {\n                Quiz.show(Quiz.responded);\n                setText(Quiz.responded.find('h4'), 'a_out_of_b_responded', 'jazzquiz', {\n                    a: 0,\n                    b: this.totalStudents\n                });\n                return;\n            }\n\n            // Question type specific.\n            switch (questionType) {\n                case 'shortanswer':\n                    for (let i = 0; i < responses.length; i++) {\n                        responses[i].response = sanitizeHTML(responses[i].response).trim();\n                    }\n                    break;\n                case 'stack':\n                    // Remove all spaces from responses.\n                    for (let i = 0; i < responses.length; i++) {\n                        responses[i].response = responses[i].response.replace(/\\s/g, '');\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            // Update data.\n            this.currentResponses = [];\n            this.respondedCount = 0;\n            for (let i = 0; i < responses.length; i++) {\n                let exists = false;\n                let count = 1;\n                if (responses[i].count !== undefined) {\n                    count = parseInt(responses[i].count);\n                }\n                this.respondedCount += count;\n                // Check if response is a duplicate.\n                for (let j = 0; j < this.currentResponses.length; j++) {\n                    if (this.currentResponses[j].response === responses[i].response) {\n                        this.currentResponses[j].count += count;\n                        exists = true;\n                        break;\n                    }\n                }\n                // Add element if not a duplicate.\n                if (!exists) {\n                    this.currentResponses.push({\n                        response: responses[i].response,\n                        count: count,\n                        qtype: questionType\n                    });\n                }\n            }\n\n            // Update responded container.\n            if (Quiz.responded.length !== 0 && responded !== undefined) {\n                Quiz.show(Quiz.responded);\n                setText(Quiz.responded.find('h4'), 'a_out_of_b_responded', 'jazzquiz', {\n                    a: responded,\n                    b: this.totalStudents\n                });\n            }\n\n            // Should we show the responses?\n            if (!this.showResponses && this.quiz.state !== 'reviewing') {\n                Quiz.hide(Quiz.responseInfo);\n                Quiz.hide(Quiz.responses);\n                return;\n            }\n\n            if (document.getElementById(tableId) === null) {\n                const html = '<table id=\"' + tableId + '\" class=\"jazzquiz-responses-overview\"></table>';\n                Quiz.show($('#' + wrapperId).html(html));\n            }\n            this.createBarGraph(this.currentResponses, 'current_response', tableId, graphId, rebuild);\n            ResponseView.sortBarGraph(tableId);\n        }\n\n        /**\n         * Fetch and show results for the ongoing or previous question.\n         * @param {boolean} rebuild If the response graph should be rebuilt or not.\n         */\n        refresh(rebuild) {\n            Ajax.get('get_results', {}, data => {\n                this.quiz.question.hasVotes = data.has_votes;\n                this.totalStudents = parseInt(data.total_students);\n\n                // eslint-disable-next-line max-len\n                this.set('jazzquiz_responses_container', 'current_responses_wrapper', data.responses, data.responded, data.question_type, 'results', rebuild);\n\n                if (data.merge_count > 0) {\n                    Quiz.show($('#jazzquiz_undo_merge'));\n                } else {\n                    Quiz.hide($('#jazzquiz_undo_merge'));\n                }\n            });\n        }\n\n        /**\n         * Method refresh() equivalent for votes.\n         */\n        refreshVotes() {\n            // Should we show the results?\n            if (!this.showResponses && this.quiz.state !== 'reviewing') {\n                Quiz.hide(Quiz.responseInfo);\n                Quiz.hide(Quiz.responses);\n                return;\n            }\n            Ajax.get('get_vote_results', {}, data => {\n                const answers = data.answers;\n                const targetId = 'wrapper_vote_responses';\n                let responses = [];\n\n                this.respondedCount = 0;\n                this.totalStudents = parseInt(data.total_students);\n\n                for (let i in answers) {\n                    if (!answers.hasOwnProperty(i)) {\n                        continue;\n                    }\n                    responses.push({\n                        response: answers[i].attempt,\n                        count: answers[i].finalcount,\n                        qtype: answers[i].qtype,\n                        slot: answers[i].slot\n                    });\n                    this.respondedCount += parseInt(answers[i].finalcount);\n                }\n\n                setText(Quiz.responded.find('h4'), 'a_out_of_b_voted', 'jazzquiz', {\n                    a: this.respondedCount,\n                    b: this.totalStudents\n                });\n\n                if (document.getElementById(targetId) === null) {\n                    const html = '<table id=\"' + targetId + '\" class=\"jazzquiz-responses-overview\"></table>';\n                    Quiz.show(Quiz.responses.html(html));\n                }\n\n                this.createBarGraph(responses, 'vote_response', targetId, 'vote', false);\n                ResponseView.sortBarGraph(targetId);\n            });\n        }\n\n    }\n\n    class Instructor {\n\n        /**\n         * @param {Quiz} quiz\n         */\n        constructor(quiz) {\n            this.quiz = quiz;\n            this.responses = new ResponseView(quiz);\n            this.isShowingCorrectAnswer = false;\n            this.totalQuestions = 0;\n            this.allowVote = false;\n\n            $(document).on('keyup', event => {\n                if (event.keyCode === 27) {\n                    // Escape key.\n                    Instructor.closeFullscreenView();\n                }\n            });\n\n            $(document).on('click', event => {\n                Instructor.closeQuestionListMenu(event, 'improvise');\n                Instructor.closeQuestionListMenu(event, 'jump');\n            });\n\n            Instructor.addEvents({\n                'repoll': () => this.repollQuestion(),\n                'vote': () => this.runVoting(),\n                'improvise': () => this.showQuestionListSetup('improvise'),\n                'jump': () => this.showQuestionListSetup('jump'),\n                'next': () => this.nextQuestion(),\n                'random': () => this.randomQuestion(),\n                'end': () => this.endQuestion(),\n                'fullscreen': () => Instructor.showFullscreenView(),\n                'answer': () => this.showCorrectAnswer(),\n                'responses': () => this.responses.toggle(),\n                'exit': () => this.closeSession(),\n                'quit': () => this.closeSession(),\n                'startquiz': () => this.startQuiz()\n            });\n\n            Instructor.addHotkeys({\n                't': 'responses',\n                'r': 'repoll',\n                'a': 'answer',\n                'e': 'end',\n                'j': 'jump',\n                'i': 'improvise',\n                'v': 'vote',\n                'n': 'next',\n                'm': 'random',\n                'f': 'fullscreen'\n            });\n        }\n\n        static addHotkeys(keys) {\n            for (let key in keys) {\n                if (keys.hasOwnProperty(key)) {\n                    keys[key] = {\n                        action: keys[key],\n                        repeat: false // TODO: Maybe event.repeat becomes more standard?\n                    };\n                    $(document).on('keydown', event => {\n                        if (keys[key].repeat || event.ctrlKey) {\n                            return;\n                        }\n                        if (String.fromCharCode(event.which).toLowerCase() !== key) {\n                            return;\n                        }\n                        let focusedTag = $(':focus').prop('tagName');\n                        if (focusedTag !== undefined) {\n                            focusedTag = focusedTag.toLowerCase();\n                            if (focusedTag === 'input' || focusedTag === 'textarea') {\n                                return;\n                            }\n                        }\n                        event.preventDefault();\n                        keys[key].repeat = true;\n                        let $control = Instructor.control(keys[key].action);\n                        if ($control.length && !$control.prop('disabled')) {\n                            $control.click();\n                        }\n                    });\n                    $(document).on('keyup', event => {\n                        if (String.fromCharCode(event.which).toLowerCase() === key) {\n                            keys[key].repeat = false;\n                        }\n                    });\n                }\n            }\n        }\n\n        static addEvents(events) {\n            for (let key in events) {\n                if (events.hasOwnProperty(key)) {\n                    $(document).on('click', '#jazzquiz_control_' + key, () => {\n                        Instructor.enableControls([]);\n                        events[key]();\n                    });\n                }\n            }\n        }\n\n        static get controls() {\n            return $('#jazzquiz_controls_box');\n        }\n\n        static get controlButtons() {\n            return Instructor.controls.find('.quiz-control-buttons');\n        }\n\n        static control(key) {\n            return $('#jazzquiz_control_' + key);\n        }\n\n        static get side() {\n            return $('#jazzquiz_side_container');\n        }\n\n        static get correctAnswer() {\n            return $('#jazzquiz_correct_answer_container');\n        }\n\n        static get isMerging() {\n            return $('.merge-from').length !== 0;\n        }\n\n        onNotRunning(data) {\n            this.responses.totalStudents = data.student_count;\n            Quiz.hide(Instructor.side);\n            setText(Quiz.info, 'instructions_for_instructor');\n            Instructor.enableControls([]);\n            Quiz.hide(Instructor.controlButtons);\n            let $studentsJoined = Instructor.control('startquiz').next();\n            if (data.student_count === 1) {\n                setText($studentsJoined, 'one_student_has_joined');\n            } else if (data.student_count > 1) {\n                setText($studentsJoined, 'x_students_have_joined', 'jazzquiz', data.student_count);\n            } else {\n                setText($studentsJoined, 'no_students_have_joined');\n            }\n            Quiz.show(Instructor.control('startquiz').parent());\n        }\n\n        onPreparing(data) {\n            Quiz.hide(Instructor.side);\n            setText(Quiz.info, 'instructions_for_instructor');\n            let enabledButtons = ['improvise', 'jump', 'random', 'fullscreen', 'quit'];\n            if (data.slot < this.totalQuestions) {\n                enabledButtons.push('next');\n            }\n            Instructor.enableControls(enabledButtons);\n        }\n\n        onRunning(data) {\n            if (!this.responses.showResponses) {\n                this.responses.hide();\n            }\n            Quiz.show(Instructor.side);\n            Instructor.enableControls(['end', 'responses', 'fullscreen']);\n            this.quiz.question.questionTime = data.questiontime;\n            if (this.quiz.question.isRunning) {\n                // Check if the question has already ended.\n                // We need to do this because the state does not update unless an instructor is connected.\n                if (data.questionTime > 0 && data.delay < -data.questiontime) {\n                    this.endQuestion();\n                }\n                // Only rebuild results if we are not merging.\n                this.responses.refresh(!Instructor.isMerging);\n            } else {\n                const started = this.quiz.question.startCountdown(data.questiontime, data.delay);\n                if (started) {\n                    this.quiz.question.isRunning = true;\n                }\n            }\n        }\n\n        onReviewing(data) {\n            Quiz.show(Instructor.side);\n            let enabledButtons = ['answer', 'repoll', 'fullscreen', 'improvise', 'jump', 'random', 'quit'];\n            if (this.allowVote) {\n                enabledButtons.push('vote');\n            }\n            if (data.slot < this.totalQuestions) {\n                enabledButtons.push('next');\n            }\n            Instructor.enableControls(enabledButtons);\n\n            // In case page was refreshed, we should ensure the question is showing.\n            if (!Question.isLoaded()) {\n                this.quiz.question.refresh();\n            }\n\n            // For now, just always show responses while reviewing.\n            // In the future, there should be an additional toggle.\n            if (this.quiz.isNewState) {\n                this.responses.show();\n            }\n            // No longer in question.\n            this.quiz.question.isRunning = false;\n        }\n\n        onSessionClosed() {\n            Quiz.hide(Instructor.side);\n            Quiz.hide(Instructor.correctAnswer);\n            Instructor.enableControls([]);\n            this.responses.clear();\n            this.quiz.question.isRunning = false;\n        }\n\n        onVoting() {\n            if (!this.responses.showResponses) {\n                this.responses.hide();\n            }\n            Quiz.show(Instructor.side);\n            Instructor.enableControls(['quit', 'fullscreen', 'answer', 'responses', 'end']);\n            this.responses.refreshVotes();\n        }\n\n        onStateChange() {\n            $('#region-main').find('ul.nav.nav-tabs').css('display', 'none');\n            $('#region-main-settings-menu').css('display', 'none');\n            $('.region_main_settings_menu_proxy').css('display', 'none');\n            Quiz.show(Instructor.controlButtons);\n            Quiz.hide(Instructor.control('startquiz').parent());\n        }\n\n        onQuestionRefreshed(data) {\n            this.allowVote = data.voteable;\n        }\n\n        onTimerEnding() {\n            this.endQuestion();\n        }\n\n        onTimerTick(timeLeft) {\n            setText(Question.timer, 'x_seconds_left', 'jazzquiz', timeLeft);\n        }\n\n        /**\n         * Start the quiz. Does not start any questions.\n         */\n        startQuiz() {\n            Quiz.hide(Instructor.control('startquiz').parent());\n            Ajax.post('start_quiz', {}, () => $('#jazzquiz_controls').removeClass('btn-hide'));\n        }\n\n        /**\n         * End the currently ongoing question or vote.\n         */\n        endQuestion() {\n            this.quiz.question.hideTimer();\n            Ajax.post('end_question', {}, () => {\n                if (this.quiz.state === 'voting') {\n                    this.responses.showVotesUponReview = true;\n                } else {\n                    this.quiz.question.isRunning = false;\n                    Instructor.enableControls([]);\n                }\n            });\n        }\n\n        /**\n         * Show a question list dropdown.\n         * @param {string} name\n         */\n        showQuestionListSetup(name) {\n            let $controlButton = Instructor.control(name);\n            if ($controlButton.hasClass('active')) {\n                // It's already open. Let's not send another request.\n                return;\n            }\n            Ajax.get('list_' + name + '_questions', {}, data => {\n                let self = this;\n                let $menu = $('#jazzquiz_' + name + '_menu');\n                const menuMargin = $controlButton.offset().left - $controlButton.parent().offset().left;\n                $menu.html('').addClass('active').css('margin-left', menuMargin + 'px');\n                $controlButton.addClass('active');\n                const questions = data.questions;\n                for (let i in questions) {\n                    if (!questions.hasOwnProperty(i)) {\n                        continue;\n                    }\n                    let $questionButton = $('<button class=\"btn\"></button>');\n                    Quiz.addMathjaxElement($questionButton, questions[i].name);\n                    $questionButton.data({\n                        'time': questions[i].time,\n                        'question-id': questions[i].questionid,\n                        'jazzquiz-question-id': questions[i].jazzquizquestionid\n                    });\n                    $questionButton.data('test', 1);\n                    $questionButton.on('click', function () {\n                        const questionId = $(this).data('question-id');\n                        const time = $(this).data('time');\n                        const jazzQuestionId = $(this).data('jazzquiz-question-id');\n                        self.jumpQuestion(questionId, time, jazzQuestionId);\n                        $menu.html('').removeClass('active');\n                        $controlButton.removeClass('active');\n                    });\n                    $menu.append($questionButton);\n                }\n            });\n        }\n\n        /**\n         * Get the selected responses.\n         * @returns {Array.<Object>} Vote options\n         */\n        static getSelectedAnswersForVote() {\n            let result = [];\n            $('.selected-vote-option').each((i, option) => {\n                result.push({\n                    text: option.dataset.response,\n                    count: option.dataset.count\n                });\n            });\n            return result;\n        }\n\n        /**\n         * Start a vote with the responses that are currently selected.\n         */\n        runVoting() {\n            const options = Instructor.getSelectedAnswersForVote();\n            const data = { questions: encodeURIComponent(JSON.stringify(options)) };\n            // eslint-disable-next-line no-return-assign\n            Ajax.post('run_voting', data, () => {});\n        }\n\n        /**\n         * Start a new question in this session.\n         * @param {string} method\n         * @param {number} questionId\n         * @param {number} questionTime\n         * @param {number} jazzquizQuestionId\n         */\n        startQuestion(method, questionId, questionTime, jazzquizQuestionId) {\n            Quiz.hide(Quiz.info);\n            this.responses.clear();\n            this.hideCorrectAnswer();\n            Ajax.post('start_question', {\n                method: method,\n                questionid: questionId,\n                questiontime: questionTime,\n                jazzquizquestionid: jazzquizQuestionId\n            }, data => this.quiz.question.startCountdown(data.questiontime, data.delay));\n        }\n\n        /**\n         * Jump to a planned question in the quiz.\n         * @param {number} questionId\n         * @param {number} questionTime\n         * @param {number} jazzquizQuestionId\n         */\n        jumpQuestion(questionId, questionTime, jazzquizQuestionId) {\n            this.startQuestion('jump', questionId, questionTime, jazzquizQuestionId);\n        }\n\n        /**\n         * Repoll the previously asked question.\n         */\n        repollQuestion() {\n            this.startQuestion('repoll', 0, 0, 0);\n        }\n\n        /**\n         * Continue on to the next preplanned question.\n         */\n        nextQuestion() {\n            this.startQuestion('next', 0, 0, 0);\n        }\n\n        /**\n         * Start a random question.\n         */\n        randomQuestion() {\n            this.startQuestion('random', 0, 0, 0);\n        }\n\n        /**\n         * Close the current session.\n         */\n        closeSession() {\n            Quiz.hide($('#jazzquiz_undo_merge'));\n            Quiz.hide(Question.box);\n            Quiz.hide(Instructor.controls);\n            setText(Quiz.info, 'closing_session');\n            // eslint-disable-next-line no-return-assign\n            Ajax.post('close_session', {}, () => window.location = location.href.split('&')[0]);\n        }\n\n        /**\n         * Hide the correct answer if showing.\n         */\n        hideCorrectAnswer() {\n            if (this.isShowingCorrectAnswer) {\n                Quiz.hide(Instructor.correctAnswer);\n                Quiz.uncheck(Instructor.control('answer'));\n                this.isShowingCorrectAnswer = false;\n            }\n        }\n\n        /**\n         * Request and show the correct answer for the ongoing or previous question.\n         */\n        showCorrectAnswer() {\n            this.hideCorrectAnswer();\n            Ajax.get('get_right_response', {}, data => {\n                Quiz.show(Instructor.correctAnswer.html(data.right_answer));\n                Quiz.renderAllMathjax();\n                Quiz.check(Instructor.control('answer'));\n                this.isShowingCorrectAnswer = true;\n            });\n        }\n\n        /**\n         * Enables all buttons passed in arguments, but disables all others.\n         * @param {Array.<string>} buttons The unique part of the IDs of the buttons to be enabled.\n         */\n        static enableControls(buttons) {\n            Instructor.controlButtons.children('button').each((index, child) => {\n                const id = child.getAttribute('id').replace('jazzquiz_control_', '');\n                child.disabled = buttons.indexOf(id) === -1;\n            });\n        }\n\n        /**\n         * Enter fullscreen mode for better use with projectors.\n         */\n        static showFullscreenView() {\n            if (Quiz.main.hasClass('jazzquiz-fullscreen')) {\n                Instructor.closeFullscreenView();\n                return;\n            }\n            // Hide the scrollbar - remember to always set back to auto when closing.\n            document.documentElement.style.overflowY = 'hidden';\n            // Sets the quiz view to an absolute position that covers the viewport.\n            Quiz.main.addClass('jazzquiz-fullscreen');\n        }\n\n        /**\n         * Exit the fullscreen mode.\n         */\n        static closeFullscreenView() {\n            document.documentElement.style.overflowY = 'auto';\n            Quiz.main.removeClass('jazzquiz-fullscreen');\n        }\n\n        /**\n         * Close the dropdown menu for choosing a question.\n         * @param {Event} event\n         * @param {string} name\n         */\n        static closeQuestionListMenu(event, name) {\n            const menuId = '#jazzquiz_' + name + '_menu';\n            // Close the menu if the click was not inside.\n            const menu = $(event.target).closest(menuId);\n            if (!menu.length) {\n                $(menuId).html('').removeClass('active');\n                Instructor.control(name).removeClass('active');\n            }\n        }\n\n        static addReportEventHandlers() {\n            $(document).on('click', '#report_overview_controls button', function () {\n                const action = $(this).data('action');\n                if (action === 'attendance') {\n                    $('#report_overview_responded').fadeIn();\n                    $('#report_overview_responses').fadeOut();\n                } else if (action === 'responses') {\n                    $('#report_overview_responses').fadeIn();\n                    $('#report_overview_responded').fadeOut();\n                }\n            });\n        }\n\n    }\n\n    return {\n        initialize: function (totalQuestions, reportView, slots) {\n            let quiz = new Quiz(Instructor);\n            quiz.role.totalQuestions = totalQuestions;\n            if (reportView) {\n                Instructor.addReportEventHandlers();\n                quiz.role.responses.showResponses = true;\n                slots.forEach(slot => {\n                    const wrapper = 'jazzquiz_wrapper_responses_' + slot.num;\n                    const table = 'responses_wrapper_table_' + slot.num;\n                    const graph = 'report_' + slot.num;\n                    quiz.role.responses.set(wrapper, table, slot.responses, undefined, slot.type, graph, false);\n                });\n            } else {\n                quiz.poll(500);\n            }\n        }\n    };\n});"],"names":["define","$","Jazz","Quiz","Question","Ajax","setText","ResponseView","constructor","quiz","currentResponses","showVotesUponReview","respondedCount","showResponses","totalStudents","document","on","this","undoMerge","event","target","classList","contains","startMerge","id","parentNode","refresh","refreshVotes","clear","responses","html","responseInfo","hide","uncheck","Instructor","control","show","check","toggle","endMerge","removeClass","post","merge","from","into","fromRowBarId","$barCell","$row","parent","hasClass","$fromRow","data","addClass","find","each","attr","createControls","name","question","hasVotes","state","$showNormalResult","$showVoteResult","length","children","append","remove","createBarGraph","targetId","graphId","rebuild","getElementById","total","highestResponseCount","i","count","parseInt","innerHTML","rows","prune","j","dataset","response","deleteRow","percent","rowIndex","currentRowIndex","row_i","row","insertRow","response_i","add","countHtml","responseCell","insertCell","onclick","toggleClass","barCell","latexId","addMathjaxElement","qtype","renderMaximaEquation","currentRow","containsOutside","countElement","barElement","firstElementChild","style","width","isSorting","insertBefore","set","wrapperId","tableId","responded","questionType","undefined","a","b","str","replace","c","charCodeAt","trim","exists","push","sortBarGraph","get","has_votes","total_students","question_type","merge_count","answers","hasOwnProperty","attempt","finalcount","slot","isShowingCorrectAnswer","totalQuestions","allowVote","keyCode","closeFullscreenView","closeQuestionListMenu","addEvents","repollQuestion","runVoting","showQuestionListSetup","nextQuestion","randomQuestion","endQuestion","showFullscreenView","showCorrectAnswer","closeSession","startQuiz","addHotkeys","keys","key","action","repeat","ctrlKey","String","fromCharCode","which","toLowerCase","focusedTag","prop","preventDefault","$control","click","events","enableControls","controls","controlButtons","side","correctAnswer","isMerging","onNotRunning","student_count","info","$studentsJoined","next","onPreparing","enabledButtons","onRunning","questionTime","questiontime","isRunning","delay","startCountdown","onReviewing","isLoaded","isNewState","onSessionClosed","onVoting","onStateChange","css","onQuestionRefreshed","voteable","onTimerEnding","onTimerTick","timeLeft","timer","hideTimer","$controlButton","self","$menu","menuMargin","offset","left","questions","$questionButton","time","questionid","jazzquizquestionid","questionId","jazzQuestionId","jumpQuestion","result","option","text","options","getSelectedAnswersForVote","encodeURIComponent","JSON","stringify","startQuestion","method","jazzquizQuestionId","hideCorrectAnswer","box","window","location","href","split","right_answer","renderAllMathjax","buttons","index","child","getAttribute","disabled","indexOf","main","documentElement","overflowY","menuId","closest","fadeIn","fadeOut","initialize","reportView","slots","role","addReportEventHandlers","forEach","wrapper","num","table","graph","type","poll"],"mappings":"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"}